<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yn.mapper.PostMapper">

    <insert id="insertPost" parameterType="com.yn.entity.Post" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (
            title, content, formatted_content, views,
            summary, cover_url, status, user_id, category_id, 
            allow_comments, is_public, is_pinned,
            created_at, updated_at, published_at
        )
        VALUES (
            #{title}, #{content}, #{formattedContent}, #{views},
            #{summary}, #{coverUrl}, #{status}, #{userId}, #{categoryId}, 
            #{allowComments}, #{isPublic}, #{isPinned},
            #{createdAt}, #{updatedAt}, #{publishedAt}
        )
    </insert>

    <update id="updatePost" parameterType="com.yn.entity.Post">
        UPDATE posts SET
            title = #{title}, content = #{content}, 
            formatted_content = #{formattedContent},
            views = #{views},
            summary = #{summary}, cover_url = #{coverUrl},
            status = #{status}, category_id = #{categoryId}, 
            allow_comments = #{allowComments}, is_public = #{isPublic}, 
            is_pinned = #{isPinned}, updated_at = #{updatedAt}, published_at = #{publishedAt}
        WHERE id = #{id}
    </update>

    <select id="selectPostById" resultType="com.yn.entity.Post">
        SELECT * FROM posts WHERE id = #{id}
    </select>

    <delete id="deletePost" parameterType="java.lang.Long">
        DELETE FROM posts WHERE id = #{id}
    </delete>

    <!-- 公共查询条件 -->
    <sql id="publishedConditions">
        status = 'published'
        AND is_public = true
        AND (published_at IS NULL OR published_at &lt;= NOW())
    </sql>

    <select id="selectPublishedPosts" resultType="com.yn.entity.Post">
        SELECT * FROM posts
        WHERE 
        <include refid="publishedConditions"/>
        ORDER BY created_at DESC
    </select>

    <select id="selectPostsByFollowerId" resultType="com.yn.entity.Post">
        SELECT p.* 
        FROM posts p
        JOIN follow f ON p.user_id = f.followed_id
        WHERE f.follower_id = #{followerId}
        AND 
        <include refid="publishedConditions"/>
        ORDER BY p.created_at DESC
    </select>

    <select id="selectPostsByUserIds" resultType="com.yn.entity.Post">
        SELECT * FROM posts
        WHERE user_id IN
        <foreach item="userId" collection="userIds" open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND 
        <include refid="publishedConditions"/>
        ORDER BY created_at DESC
    </select>

    <!-- 查询相同分类的帖子 -->
    <select id="selectPostsByCategory" resultType="com.yn.entity.Post">
        SELECT
            p.id,
            p.title,
            p.cover_url AS coverUrl,
            p.views,
            u.username AS authorName
        FROM posts p
            JOIN user u ON p.user_id = u.id
        WHERE p.category_id = #{categoryId}
            AND p.id != #{excludeId}
            AND p.status = 'published'
        ORDER BY p.published_at DESC
        LIMIT #{limit}
    </select>

    <!-- 查询帖子的标签ID -->
    <select id="selectTagIdsByPostId" resultType="Long">
        SELECT tag_id
        FROM post_tags
        WHERE post_id = #{postId}
    </select>

    <!-- 查询相同标签的帖子 -->
    <select id="selectPostsByTags" resultType="com.yn.entity.Post">
        SELECT
            p.id,
            p.title,
            p.cover_url AS coverUrl,
            p.views,
            u.username AS authorName,
            tag_counts.common_tag_count AS common_tags
        FROM (
            /* 标签聚合子查询 */
            SELECT post_id, COUNT(*) AS common_tag_count
            FROM post_tags
            WHERE tag_id IN
            <foreach item="tagId" collection="tagIds" open="(" separator="," close=")">
                #{tagId}
            </foreach>
            GROUP BY post_id
            ORDER BY common_tag_count DESC
            LIMIT #{limit} * 3  /* 预取扩大样本 */
        ) tag_counts
        JOIN posts p ON p.id = tag_counts.post_id
        JOIN user u ON p.user_id = u.id
        WHERE p.id != #{excludeId}
        AND p.status = 'published'
        ORDER BY tag_counts.common_tag_count DESC
        LIMIT #{limit}
    </select>

    <!-- 查询相同作者的帖子 -->
    <select id="selectPostsByAuthor" resultType="com.yn.entity.Post">
        SELECT
            p.id,
            p.title,
            p.cover_url AS coverUrl,
            p.views,
            u.username AS authorName
        FROM posts p
        JOIN user u ON p.user_id = u.id
        WHERE p.user_id = #{authorId}
            AND p.id != #{excludeId}
            AND p.status = 'published'
        ORDER BY p.published_at DESC
        LIMIT #{limit}
    </select>

    <!-- 查询热门帖子 -->
    <select id="selectPopularPosts" resultType="com.yn.entity.Post">
        SELECT
            p.id,
            p.title,
            p.cover_url AS coverUrl,
            p.views,
            u.username AS authorName
        FROM posts p
            JOIN user u ON p.user_id = u.id
        WHERE p.id != #{excludeId}
            AND p.status = 'published'
        ORDER BY p.views DESC, p.published_at DESC
        LIMIT #{limit}
    </select>

    <select id="selectPostsByIds" resultType="com.yn.entity.Post">
        SELECT * FROM posts WHERE id IN
        <foreach item="id" collection="postIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <update id="incrementViews">
        UPDATE posts
        SET views = views + 1 
        WHERE id = #{postId}
    </update>

    <select id="selectPostsByUserId" resultType="com.yn.entity.Post">
        SELECT * FROM posts WHERE user_id = #{userId} ORDER BY created_at DESC
    </select>

</mapper>